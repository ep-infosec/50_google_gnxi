// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mockos.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MockOS message represents an OS package which can be used by a gNOI client or target.
type MockOS struct {
	Version               string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Cookie                string   `protobuf:"bytes,2,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Padding               []byte   `protobuf:"bytes,3,opt,name=padding,proto3" json:"padding,omitempty"`
	Hash                  []byte   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Incompatible          bool     `protobuf:"varint,5,opt,name=incompatible,proto3" json:"incompatible,omitempty"`
	ActivationFailMessage string   `protobuf:"bytes,6,opt,name=activation_fail_message,json=activationFailMessage,proto3" json:"activation_fail_message,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *MockOS) Reset()         { *m = MockOS{} }
func (m *MockOS) String() string { return proto.CompactTextString(m) }
func (*MockOS) ProtoMessage()    {}
func (*MockOS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mockos_b5486c52a59d8971, []int{0}
}
func (m *MockOS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MockOS.Unmarshal(m, b)
}
func (m *MockOS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MockOS.Marshal(b, m, deterministic)
}
func (dst *MockOS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MockOS.Merge(dst, src)
}
func (m *MockOS) XXX_Size() int {
	return xxx_messageInfo_MockOS.Size(m)
}
func (m *MockOS) XXX_DiscardUnknown() {
	xxx_messageInfo_MockOS.DiscardUnknown(m)
}

var xxx_messageInfo_MockOS proto.InternalMessageInfo

func (m *MockOS) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MockOS) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *MockOS) GetPadding() []byte {
	if m != nil {
		return m.Padding
	}
	return nil
}

func (m *MockOS) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *MockOS) GetIncompatible() bool {
	if m != nil {
		return m.Incompatible
	}
	return false
}

func (m *MockOS) GetActivationFailMessage() string {
	if m != nil {
		return m.ActivationFailMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*MockOS)(nil), "pb.MockOS")
}

func init() { proto.RegisterFile("mockos.proto", fileDescriptor_mockos_b5486c52a59d8971) }

var fileDescriptor_mockos_b5486c52a59d8971 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xc1, 0x8a, 0x83, 0x30,
	0x10, 0x40, 0x89, 0xeb, 0x66, 0x77, 0x83, 0xa7, 0xc0, 0xee, 0xe6, 0x28, 0x9e, 0x3c, 0xf5, 0x52,
	0xe8, 0x27, 0xf4, 0x26, 0x05, 0xfb, 0x01, 0x32, 0xc6, 0x54, 0x07, 0x35, 0x13, 0x4c, 0xf0, 0x0b,
	0xfb, 0x61, 0xa5, 0x69, 0xa5, 0xf4, 0x36, 0xef, 0x3d, 0x86, 0x61, 0x44, 0x36, 0x93, 0x1e, 0xc9,
	0xef, 0xdc, 0x42, 0x81, 0x64, 0xe2, 0xda, 0xe2, 0xca, 0x04, 0xaf, 0x48, 0x8f, 0xa7, 0xb3, 0x54,
	0xe2, 0x6b, 0x35, 0x8b, 0x47, 0xb2, 0x8a, 0xe5, 0xac, 0xfc, 0xa9, 0x37, 0x94, 0x7f, 0x82, 0x6b,
	0xa2, 0x11, 0x8d, 0x4a, 0x62, 0x78, 0xd2, 0x7d, 0xc3, 0x41, 0xd7, 0xa1, 0xed, 0xd5, 0x47, 0xce,
	0xca, 0xac, 0xde, 0x50, 0x4a, 0x91, 0x0e, 0xe0, 0x07, 0x95, 0x46, 0x1d, 0x67, 0x59, 0x88, 0x0c,
	0xad, 0xa6, 0xd9, 0x41, 0xc0, 0x76, 0x32, 0xea, 0x33, 0x67, 0xe5, 0x77, 0xfd, 0xe6, 0xe4, 0x41,
	0xfc, 0x83, 0x0e, 0xb8, 0x42, 0x40, 0xb2, 0xcd, 0x05, 0x70, 0x6a, 0x66, 0xe3, 0x3d, 0xf4, 0x46,
	0xf1, 0x78, 0xfa, 0xf7, 0x95, 0x8f, 0x80, 0x53, 0xf5, 0x88, 0x2d, 0x8f, 0x1f, 0xed, 0x6f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x29, 0xe9, 0x7a, 0x71, 0xe1, 0x00, 0x00, 0x00,
}
